{"ast":null,"code":"'use strict';\n\nconst callbacks = new Set();\nlet isCalled = false;\nlet isRegistered = false;\nfunction exit(exit, signal) {\n  if (isCalled) {\n    return;\n  }\n  isCalled = true;\n  const maybeExit = () => {\n    if (exit === true) {\n      process.exit(128 + signal); // eslint-disable-line unicorn/no-process-exit\n    }\n  };\n\n  Promise.all(Array.from(callbacks).map(fn => fn())).then(maybeExit); // eslint-disable-line unicorn/prefer-spread\n  setTimeout(maybeExit, 15000).unref();\n}\nmodule.exports = callback => {\n  callbacks.add(callback);\n  if (!isRegistered) {\n    isRegistered = true;\n    process.once('exit', exit);\n    process.once('SIGINT', exit.bind(null, true, 2));\n    process.once('SIGTERM', exit.bind(null, true, 15));\n\n    // PM2 Cluster shutdown message. Caught to support async handlers with pm2, needed because\n    // explicitly calling process.exit() doesn't trigger the beforeExit event, and the exit\n    // event cannot support async handlers, since the event loop is never called after it.\n    process.on('message', message => {\n      if (message === 'shutdown') {\n        exit(true, -128);\n      }\n    });\n  }\n  return () => {\n    callbacks.delete(callback);\n  };\n};","map":{"version":3,"names":["callbacks","Set","isCalled","isRegistered","exit","signal","maybeExit","process","Promise","all","Array","from","map","fn","then","setTimeout","unref","module","exports","callback","add","once","bind","on","message","delete"],"sources":["/Users/firyal/Documents/portfolio-fr/node_modules/exit-hook/index.js"],"sourcesContent":["'use strict';\n\nconst callbacks = new Set();\nlet isCalled = false;\nlet isRegistered = false;\n\nfunction exit(exit, signal) {\n\tif (isCalled) {\n\t\treturn;\n\t}\n\n\tisCalled = true;\n\n\tconst maybeExit = () => {\n\t\tif (exit === true) {\n\t\t\tprocess.exit(128 + signal); // eslint-disable-line unicorn/no-process-exit\n\t\t}\n\t};\n\n\tPromise.all(Array.from(callbacks).map(fn => fn())).then(maybeExit); // eslint-disable-line unicorn/prefer-spread\n\tsetTimeout(maybeExit, 15000).unref();\n}\n\nmodule.exports = callback => {\n\tcallbacks.add(callback);\n\n\tif (!isRegistered) {\n\t\tisRegistered = true;\n\n\t\tprocess.once('exit', exit);\n\t\tprocess.once('SIGINT', exit.bind(null, true, 2));\n\t\tprocess.once('SIGTERM', exit.bind(null, true, 15));\n\n\t\t// PM2 Cluster shutdown message. Caught to support async handlers with pm2, needed because\n\t\t// explicitly calling process.exit() doesn't trigger the beforeExit event, and the exit\n\t\t// event cannot support async handlers, since the event loop is never called after it.\n\t\tprocess.on('message', message => {\n\t\t\tif (message === 'shutdown') {\n\t\t\t\texit(true, -128);\n\t\t\t}\n\t\t});\n\t}\n\n\treturn () => {\n\t\tcallbacks.delete(callback);\n\t};\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,SAAS,GAAG,IAAIC,GAAG,EAAE;AAC3B,IAAIC,QAAQ,GAAG,KAAK;AACpB,IAAIC,YAAY,GAAG,KAAK;AAExB,SAASC,IAAI,CAACA,IAAI,EAAEC,MAAM,EAAE;EAC3B,IAAIH,QAAQ,EAAE;IACb;EACD;EAEAA,QAAQ,GAAG,IAAI;EAEf,MAAMI,SAAS,GAAG,MAAM;IACvB,IAAIF,IAAI,KAAK,IAAI,EAAE;MAClBG,OAAO,CAACH,IAAI,CAAC,GAAG,GAAGC,MAAM,CAAC,CAAC,CAAC;IAC7B;EACD,CAAC;;EAEDG,OAAO,CAACC,GAAG,CAACC,KAAK,CAACC,IAAI,CAACX,SAAS,CAAC,CAACY,GAAG,CAACC,EAAE,IAAIA,EAAE,EAAE,CAAC,CAAC,CAACC,IAAI,CAACR,SAAS,CAAC,CAAC,CAAC;EACpES,UAAU,CAACT,SAAS,EAAE,KAAK,CAAC,CAACU,KAAK,EAAE;AACrC;AAEAC,MAAM,CAACC,OAAO,GAAGC,QAAQ,IAAI;EAC5BnB,SAAS,CAACoB,GAAG,CAACD,QAAQ,CAAC;EAEvB,IAAI,CAAChB,YAAY,EAAE;IAClBA,YAAY,GAAG,IAAI;IAEnBI,OAAO,CAACc,IAAI,CAAC,MAAM,EAAEjB,IAAI,CAAC;IAC1BG,OAAO,CAACc,IAAI,CAAC,QAAQ,EAAEjB,IAAI,CAACkB,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IAChDf,OAAO,CAACc,IAAI,CAAC,SAAS,EAAEjB,IAAI,CAACkB,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;;IAElD;IACA;IACA;IACAf,OAAO,CAACgB,EAAE,CAAC,SAAS,EAAEC,OAAO,IAAI;MAChC,IAAIA,OAAO,KAAK,UAAU,EAAE;QAC3BpB,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC;MACjB;IACD,CAAC,CAAC;EACH;EAEA,OAAO,MAAM;IACZJ,SAAS,CAACyB,MAAM,CAACN,QAAQ,CAAC;EAC3B,CAAC;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}