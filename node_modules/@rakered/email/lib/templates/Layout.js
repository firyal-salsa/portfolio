"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cell = exports.Row = exports.Grid = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const styles = {
    table: {
        width: '100%',
        borderCollapse: 'collapse',
    },
};
function ensureArray(arr) {
    return Array.isArray(arr) ? arr : [arr].filter(Boolean);
}
function Cell({ children, style = {}, className, colSpan }) {
    return (jsx_runtime_1.jsx("td", Object.assign({ colSpan: colSpan, style: style, className: className }, { children: children }), void 0));
}
exports.Cell = Cell;
function Row({ children, style = {} }) {
    const content = ensureArray(children)
        .filter(Boolean)
        .map((el, idx, { length }) => {
        if (el.type === Cell) {
            return el;
        }
        return (jsx_runtime_1.jsx(Cell, Object.assign({ colSpan: length === 1 ? 12 : undefined }, { children: el }), idx));
    });
    return jsx_runtime_1.jsx("tr", Object.assign({ style: style }, { children: content }), void 0);
}
exports.Row = Row;
function Grid({ children, style = {} }) {
    const content = ensureArray(children)
        .filter(Boolean)
        .map((el, idx) => {
        if (!el) {
            return null;
        }
        // We want this content the be on it's own row.
        if (el.type === Row) {
            return el;
        }
        // The content is all inside a single cell (so a row)
        if (el.type === Cell) {
            return jsx_runtime_1.jsx(Row, { children: el }, idx);
        }
        // The content is one cell inside it's own row
        return (jsx_runtime_1.jsx(Row, { children: jsx_runtime_1.jsx(Cell, Object.assign({ colSpan: 12 }, { children: el }), void 0) }, idx));
    })
        .filter(Boolean);
    return (jsx_runtime_1.jsx("table", Object.assign({ cellPadding: 0, cellSpacing: 0, style: Object.assign(Object.assign({}, styles.table), style) }, { children: jsx_runtime_1.jsx("tbody", { children: content }, void 0) }), void 0));
}
exports.Grid = Grid;
Grid.Row = Row;
Grid.Cell = Cell;
//# sourceMappingURL=Layout.js.map