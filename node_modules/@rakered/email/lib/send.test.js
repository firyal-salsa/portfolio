"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const send_1 = require("./send");
const smokeTest_1 = __importDefault(require("./test/smokeTest"));
const render_1 = require("./render");
const TestMail_1 = __importDefault(require("./test/TestMail"));
const sendMailMock = jest.fn();
jest.mock('nodemailer');
const nodemailer = require('nodemailer');
nodemailer.createTransport.mockReturnValue({ sendMail: sendMailMock });
const mail = {
    to: 'hunter@example.com',
    from: 'stephan@example.com',
    subject: 'hello',
    text: 'hi there!',
    html: render_1.render(jsx_runtime_1.jsx(TestMail_1.default, { code: 123456, siteName: "example", siteUrl: "https://example.com" }, void 0)),
};
beforeEach(() => {
    process.env.MAIL_URL = '';
    sendMailMock.mockClear();
    nodemailer.createTransport.mockClear();
});
test('attempts to send the mail when MAIL_URL is set', () => __awaiter(void 0, void 0, void 0, function* () {
    process.env.MAIL_URL = 'smtp://localhost:25';
    try {
        yield send_1.send(mail);
        expect(sendMailMock).toHaveBeenCalledWith(mail);
    }
    catch (e) {
        expect(e).toEqual(1);
    }
}));
test('prints the mail message when MAIL_URL not set', () => __awaiter(void 0, void 0, void 0, function* () {
    const [msg] = yield smokeTest_1.default(send_1.send(mail));
    expect(msg).toMatch('hi there!');
}));
test('throws error for invalid mail protocol', () => __awaiter(void 0, void 0, void 0, function* () {
    process.env.MAIL_URL = 'http://example.com';
    yield expect(send_1.send(mail)).rejects.toThrow('Email protocol must be smtp or smtps');
}));
//# sourceMappingURL=send.test.js.map