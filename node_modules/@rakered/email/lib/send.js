"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.disconnect = exports.send = exports.addSmokeListener = void 0;
const nodemailer_1 = __importDefault(require("nodemailer"));
const mail_composer_1 = __importDefault(require("nodemailer/lib/mail-composer"));
const url_1 = require("url");
const exit_hook_1 = __importDefault(require("exit-hook"));
function createTransport(mailUrl) {
    const url = new url_1.URL(mailUrl);
    if (url.protocol !== 'smtp:' && url.protocol !== 'smtps:') {
        throw new Error(`Email protocol must be smtp or smtps`);
    }
    if (url.protocol === 'smtp:' && url.port === '465') {
        console.warn(`Connecting over a secure port, while using smtp protocol! You probably mean to use smtps:`);
    }
    // Allow overriding pool setting, but default to true.
    if (!url.searchParams.has('pool')) {
        url.searchParams.set('pool', 'true');
    }
    return nodemailer_1.default.createTransport(url.toString());
}
const _transportCache = new Map();
function getTransport() {
    const url = process.env.MAIL_URL;
    if (!url) {
        return null;
    }
    if (_transportCache.has(url)) {
        return _transportCache.get(url);
    }
    const transporter = createTransport(url);
    _transportCache.set(url, transporter);
    return _transportCache.get(url);
}
let devModeMailId = 0;
const listeners = new Set();
const addSmokeListener = (fn) => {
    listeners.add(fn);
};
exports.addSmokeListener = addSmokeListener;
function devModeSend(mail) {
    var e_1, _a;
    return __awaiter(this, void 0, void 0, function* () {
        const messageId = (++devModeMailId).toString().padStart(3, '0');
        const chunks = [];
        const stream = new mail_composer_1.default(mail).compile().createReadStream();
        try {
            for (var stream_1 = __asyncValues(stream), stream_1_1; stream_1_1 = yield stream_1.next(), !stream_1_1.done;) {
                const chunk = stream_1_1.value;
                chunks.push(chunk);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (stream_1_1 && !stream_1_1.done && (_a = stream_1.return)) yield _a.call(stream_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        const content = Buffer.concat(chunks).toString('utf-8');
        const header = '====== BEGIN MAIL #' + messageId + ' ======';
        const footer = '====== END MAIL   #' + messageId + ' ======';
        const output = [header, content, footer].join('\n');
        for (const listener of listeners) {
            listener(output);
            listeners.delete(listener);
        }
        if (process.env.NODE_ENV !== 'test') {
            console.log(output);
        }
        return;
    });
}
function send(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const transport = getTransport();
        if (transport) {
            return transport.sendMail(options);
        }
        return devModeSend(options);
    });
}
exports.send = send;
function disconnect() {
    return __awaiter(this, void 0, void 0, function* () {
        for (const url of _transportCache.keys()) {
            const transport = _transportCache.get(url);
            _transportCache.delete(url);
            if (transport && typeof transport.close === 'function') {
                transport.close();
            }
        }
    });
}
exports.disconnect = disconnect;
// graceful shutdown
exit_hook_1.default(() => disconnect());
//# sourceMappingURL=send.js.map